name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_LEDGER: fintech-payments-ledger-service
  IMAGE_NAME_TRANSFER: fintech-payments-transfer-service

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: fintechpayments
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21 for Ledger Service
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run Ledger Service tests
      run: ./gradlew :fintech-payments-ledger-service:test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/fintechpayments
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        SPRING_DATA_REDIS_HOST: localhost
        SPRING_DATA_REDIS_PORT: 6379

    - name: Set up JDK 17 for Transfer Service
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run Transfer Service tests
      run: ./gradlew :fintech-payments-transfer-service:test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: '**/build/test-results/test/TEST-*.xml'
        reporter: java-junit

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/build/test-results/
          **/build/reports/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Ledger Service
      id: meta-ledger
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_LEDGER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Ledger Service image
      uses: docker/build-push-action@v5
      with:
        context: ./fintech-payments-ledger-service
        file: ./fintech-payments-ledger-service/Dockerfile
        push: true
        tags: ${{ steps.meta-ledger.outputs.tags }}
        labels: ${{ steps.meta-ledger.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for Transfer Service
      id: meta-transfer
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_TRANSFER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Transfer Service image
      uses: docker/build-push-action@v5
      with:
        context: ./fintech-payments-transfer-service
        file: ./fintech-payments-transfer-service/Dockerfile
        push: true
        tags: ${{ steps.meta-transfer.outputs.tags }}
        labels: ${{ steps.meta-transfer.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        docker-compose --version
        
    - name: Run integration tests
      run: |
        # Start services
        docker-compose up -d postgres redis
        
        # Wait for services to be ready
        sleep 30
        
        # Start application services
        docker-compose up -d ledger-service transfer-service
        
        # Wait for applications to start
        sleep 60
        
        # Run health checks
        curl -f http://localhost:8081/actuator/health || exit 1
        curl -f http://localhost:8080/actuator/health || exit 1
        
        # Run basic API tests
        curl -X POST http://localhost:8080/api/transfers \
          -H "Content-Type: application/json" \
          -H "Idempotency-Key: test-$(date +%s)" \
          -d '{"fromAccountId": "acc-123", "toAccountId": "acc-456", "amount": 100.00}' \
          || exit 1

    - name: Cleanup
      if: always()
      run: docker-compose down -v

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-and-push, integration-test]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' }}
      run: echo "✅ CI/CD pipeline completed successfully!"
      
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: echo "❌ CI/CD pipeline failed!"